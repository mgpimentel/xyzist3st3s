{
  "ex1": "## Org-robô: o organizador de fila\n\nSua empresa tem um nova aquisição: um robô. Como primeira tarefa, você que ensinar o robô a atuar como um *Org-robô* que aloca pessoas em filas respeitando a ordem de chegada. A fila começa vazia e, a cada pessoa que entra, o *Org* a coloca no final da fila. Para perceber que não vai chegar mais ninguém, o *Org* espera um ponto final. Para mostrar seu trabalho, o *Org* imprime a fila que criou.\n\n**Você digita**\n```\nAna\nYasmin\nDani\n.\n```\n\n**Programa imprime**\n```\n['Ana', 'Yasmin', 'Dani']\n```\n",
  "ex2": "## Joaninha Tromba mas Não Cai\n\nNossa Joaninha aspira direitinho o chão, desviando de obstáculos até que a bateria acabe.\nSeu trabalho é escrever um programa que simula os movimentos da Joaninha com base na leitura de sensores e no nível da bateria.\nA cada passo, a Joaninha decide o que fazer e consome bateria. Quando a energia está acabando, ela para e pede recarga.\n\n- Bateria inicial: 0 a 100.\n- Funciona enquanto bateria > 5.\n- Ações: `L` → livre, pode avançar (−1%); `O` → obstáculo, tem que virar (−5%).\n- A primeira linha informa o valor inicial da bateria. As linhas seguintes informam leituras dos sensores até a bateria ter que ser recarregada.\n\n**Você digita**\n```\n13\nL\nL\nO\nL\n```\n\n**Programa imprime**\n```\nAvançar\nBateria: 12\nAvançar\nBateria: 11\nVirar\nBateria: 6\nAvançar\nBateria: 5\navancos: 3\nviradas: 1\nRecarregar...\n```",
  "ex3": "## A fila e o tamanho da fila\nHá muitos cursos em que as vagas acabam cedo mas é possível criar uma lista de espera de candidatas interessadas. Você vai ajudar a organizar na forma de ula  fila com o nome das candidatas. Para todo mundo saber sua colocação na fila, cada novo nome que entra na fila, você mostra o tamanho da fila e a composição da fila. Quando as candidatas acabam, você é avisada com um sinal `.` para finalizar e informar quantas meninas ficaram na fila.\n\n**Você digita**\n```\nAna\nBruna\nCarla\n.\n```\n\n**Programa imprime**\n```\n1 ['Ana']\n2 ['Ana', 'Bruna']\n3 ['Ana', 'Bruna', 'Carla']\n```\n",
  "ex4": "## Lista de Chamada do Meninas Programadoras... ordenada!\n\nUm dos problemas legais em computação é o de ordenação de valores de modo eficiente. Logo no segundo semestre de um curso de graduação, alunas e alunos aprendem mais de uma dúzia de algoritmos de ordenação diferentes: cada um com suas vantagens e limitações.\n\nDiante disso, não é surpresa que as programadoras que implementaram o interpretador Python já deixaram pronta, para a classe Lista, um **método** de ordenação que tem boa eficiência para a maioria dos casos: o método `sort()`.\n- *Em tempo: a gente chama de **método** uma **função** que é específica de uma classe, lembram?*\n\nPara usar o método, primeiro colocamos os dados que queremos ordenar em uma lista. A seguir, chamamos o método `sort()` para lista que criamos. Como resultado, a lista é ordenada em ordem crescente.\n\nSeu programa deve ler o número de alunas de uma turma e depois ler os nomes das alunas, um por linha. Para ajudar a professora com a lista de chamada, você deve imprimir a lista na ordem original e ordenada alfabeticamente.\n\nLeia N e depois N nomes. Imprima na **ordem original** e em **ordem alfabética**.\n\n**Você digita**\n```\n4\nCarla\nAna\nBeatriz\nDaniela\n```\n\n**Programa imprime**\n```\n['Carla', 'Ana', 'Beatriz', 'Daniela']\n['Ana', 'Beatriz', 'Carla', 'Daniela']\n```",
  "ex5": "## Olha a cobra!\n\nA dança de quadrilha é sempre um ponto alto das festas juninas. Em um momento, os pares de dançarinos estão todos em fila, caminhando e dançando um atrás do outro... de repente, a pessoa que puxa a quadrilha grita: olha a cobra! e todo mundo dá um grito fingindo medo, vira para outro lado para fugir da cobra, e continua dançando, ê ê ê...\n\nPara ajudar em festas juninas, as meninas que programaram o interpretador Python criaram o método reverse()da classe Lista. Esse método, quando aplicado a uma lista, inverte a ordem dos elementos... viu como é útil na quadrilha?\n\nDesta vez você dever vários nomes e colocar em uma lista, imprimir a lista na ordem original e na order invertida, ok? Inclua o tamanho também, ok?\n\n**Você digita**\n```\nAna\nDuda\nCarla\nBia\n.\n```\n\n**Programa imprime**\n```\n4 ['Ana', 'Duda', 'Carla', 'Bia']\n4 ['Bia', 'Carla', 'Duda', 'Ana']\n```",
  "ex6": "# Lista de Chamada do Meninas Programadoras... ordem decrescente!\n\nEntão... uma das meninas que estava com tempo sobrando no final de semana resolveu entregar a lista de chamada para a professora em ordem inversa... só para aparecer, ê ê ê... como será que ela fez?\n\nSeu programa deve criar a lista de alunas lendo nomes de meninas, um por linha, até encontrar um ponto final. Depois seu programa deve imprimir a lista três vezes: na ordem original, em ordem alfabética e em ordem alfabética inversa.\n\n> **ATENÇÃO: Resolve primeiro os dois anteriores, ok?**\n\n**Você digita**\n```\nIasmin\nMonica\nDriele\nOlga\nAbigail\n.\n```\n\n**Programa imprime**\n```\n['Iasmin', 'Monica', 'Driele', 'Olga', 'Abigail']\n['Abigail', 'Driele', 'Iasmin', 'Monica', 'Olga']\n['Olga', 'Monica', 'Iasmin', 'Driele', 'Abigail']\n```",
  "ex7": "## Senha válida #1\n\nSabe aquela senha que a gente tem que usar de vez em sempre? A ideia é a gente usar uma que seja fácil para a gente lembrar, mas difícil para pessoas mal-intencionadas acertarem usando tentativa e erro.\n\nSó que muita gente tenta fazer o mais fácil, usando números iguais como `3333` ou em sequência como `xxxxx`... aí já viu, né? Pessoas mal-intencionadas com certeza tentam sequências assim primeiro, porque sabem que muita gente tem preguiça de fazer uma sequência mais difícil.\n\nComo podemos ajudar? Seu programa deve ler uma linha com uma senha e verificar se todos os caracteres são iguais, dando uma mensagem apropriada.\n\n**Você digita**\n```\n000000\n```\n\n**Programa imprime**\n```\nTudo igual, não!\n```\n\n**Você digita**\n```\nxxxxxxy\n```\n\n**Programa imprime**\n```\nAlguma coisa está diferente!\n```",
  "ex8": "## Senha válida #2\n\nContinuamos tentando ajudar as pessoas a entenderem como fazer senhas melhores. Seu programa deve ler uma string em uma linha e verificar se a senha passa ou não pelo seu analisador de senhas. Para passar desta vez, a senha tem que ter pelo menos 8 caracteres, dos quais pelo menos um é um algarismo.\n\n**Você digita**\n```\nabc12defg\n```\n\n**Programa imprime**\n```\nOK\n```",
  "ex9": "## Senha válida #3\n\nContinuamos tentando ajudar as pessoas a entenderem como fazer senhas melhores. Seu programa deve ler uma string em uma linha e verificar se a senha passa ou não pelo seu analisador de senhas. Para passar desta vez, a senha tem que ter pelo menos 8 caracteres, dos quais pelo menos um é um algarismo e pelo menos um é uma vogal (maiúscula ou minúscula).\n\n**Você digita**\n```\nçlkjhgfds\n```\n\n**Programa imprime**\n```\nVerifique algarismo e vogal\n```\n\n**Você digita**\n```\noie+afff\n```\n\n**Programa imprime**\n```\nVerifique algarismo\n```\n\n**Você digita**\n```\nxyz01zyz\n```\n\n**Programa imprime**\n```\nVerifique vogal\n```\n\n**Você digita**\n```\nxyz1Azyz\n```\n\n**Programa imprime**\n```\nOK!\n```\n",
  "ex10": "## 10) Senha válida #4\n\nContinuamos tentando ajudar as pessoas a entenderem como fazer senhas melhores. Seu programa deve ler uma string em uma linha e verificar se a senha passa ou não pelo seu analisador de senhas. Para passar desta vez, a senha tem que ter pelo menos 8 caracteres, contendo pelo menos: um algarismo, uma vogal minúscula, uma vogal maiúscula e um entre os caracteres  `!@#$%&*+=`\n\n**Você digita**\n```\nAbcdef1+\n```\n\n**Programa imprime**\n```\nOK\n```\n\n**Você digita**\n```\nAbcdef123\n```\n\n**Programa imprime**\n```\nErro!\n```\n",
  "ex11": "## Problema com pilhas\n\nSão inúmeros os problemas que podem ser causados pelo descarte incorreto de pilhas e baterias. São enormes os riscos para a saúde humana e para o meio ambiente, devido aos metais pesados tóxicos que contêm, como chumbo, mercúrio, cádmio e lítio, que contaminam o solo, a água e a cadeia alimentar, podendo causar doenças graves e danos neurológicos, renais e cardíacos.\n\nNa farmácia perto da sua escola tem uma caixa para o descarte correto de pilhas... infelizmente tem gente que coloca outras coisas na caixa.\n\nVocê tem que programar um robô para computar e separar os descartes. Se for pilha ou bateria, ele coloca em uma lista e ajusta o contador de descartes válidos. Se for outra coisa, ele coloca em outra lista e ajusta o contador de descartes inválidos. No final, o robô apresenta o total de cada categoria e as listas que ele montou.\n\nLeia itens (um por linha) até `.`. Classifique como *válido* se a linha contiver as palavras `pilha` ou `bateria`. Caso contrário, *inválido*. No final, imprima os totais e as listas.\n\n**Você digita**\n```\npilha AA\numa pilha AAA\npapel\npastico\nbateria 9V\n.\n```\n\n**Programa imprime**\n```\nvalidos: 3 ['pilha AA', 'uma pilha AAA', 'bateria 9V']\ninvalidos: 2 ['papel', 'pastico']\n```",
  "ex12": "## 12) Pilhas de Pratos\n\nAs meninas da sua escola organizaram uma festa em que todo mundo leva um prato para contribuir. Para não dar confusão, cada prato tem o nome da dona escrito no fundo.\n\nNo final da festa, todo mundo ajuda na limpeza... as meninas se dividem entre limpar o chão, o banheiro, as mesas, e uma delas lava os pratos. As que tiram as mesas vão empilhando os pratos na pia da cozinha. A menina lavadora, ao terminar cada prato, chama a dona para pegar.\n\nSeu programa deve simular o processo de recebimento e entrega dos pratos. As entradas para o programa são linhas com o nome de uma menina (simulam a chegada de pratos), ou a string `lavando` (registra que um prato foi lavado e a dona deve ir buscar), ou a string `final feliz` (indica o fim dos pratos).\n\n**Você digita**\n```\nAna\nBeatriz\nlavando\nCarla\nlavando\nlavando\nfinal feliz\n```\n\n**Programa imprime**\n```\nlavando prato de Beatriz\nlavando prato de Carla\nlavando prato de Ana\n```"
}